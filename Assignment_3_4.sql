DROP TABLE BOOK_TXN;
DROP TABLE BOOK_SERIAL;
DROP TABLE BOOK;
DROP TABLE MEMBER;
DROP TABLE MEMBER_TYPE;

CREATE TABLE BOOK (
    BOOK_ID INT NOT NULL,
    TITLE VARCHAR2(100) NOT NULL,
    AUTHOR VARCHAR2(100) NOT NULL,
    PUBLILSHER VARCHAR2(100) NOT NULL,
    PRICE NUMBER(38, 2) NOT NULL,
    CONSTRAINT PK_BOOK PRIMARY KEY (BOOK_ID)
);

CREATE TABLE BOOK_SERIAL (
    BOOK_ID INT NOT NULL,
    SNO INT NOT NULL,
    ARRIVAL_DATE DATE NOT NULL,
    AVAILABILITY_STATUS CHAR(1) DEFAULT 'Y' NOT NULL,
    CONSTRAINT PK_BOOK_SERIAL PRIMARY KEY (BOOK_ID, SNO),
    CONSTRAINT FK_BOOK_SERIAL_BOOK FOREIGN KEY (BOOK_ID) REFERENCES BOOK (BOOK_ID),
    CONSTRAINT CHK_STATUS CHECK(AVAILABILITY_STATUS IN ('Y', 'N'))
);

CREATE TABLE MEMBER_TYPE (
    MEMBER_TYPE_ID INT NOT NULL,
    MEMBER_TYPE_DESC VARCHAR2(100) NOT NULL,
    MAX_BOOKS_ALLOWED INT NOT NULL,
    CONSTRAINT PK_MEMBER_TYPE PRIMARY KEY (MEMBER_TYPE_ID),
    CONSTRAINT CHK_MEMBER_TYPE CHECK (MEMBER_TYPE_DESC IN ('STUDENT', 'FACULTY')),
    CONSTRAINT CHK_MAX_BOOKS CHECK (MAX_BOOKS_ALLOWED > 0)
);

CREATE TABLE MEMBER (
    MEMBER_ID INT NOT NULL,
    MEMBER_TYPE_ID INT NOT NULL,
    MEMBER_NAME VARCHAR2(100) NOT NULL,
    MEMBER_EMAIL VARCHAR2(100) NULL,
    MEMBER_ADDR VARCHAR2(100) NULL,
    CONSTRAINT PK_MEMBER PRIMARY KEY (MEMBER_ID),
    CONSTRAINT FK_MEMBER_TYPE FOREIGN KEY (MEMBER_TYPE_ID) REFERENCES MEMBER_TYPE (MEMBER_TYPE_ID)
);

CREATE TABLE BOOK_TXN (
    TXN_ID INT NOT NULL,
    MEMBER_ID INT NOT NULL,
    BOOK_ID INT NOT NULL, 
    SNO INT NOT NULL,
    DT_ISSUE DATE NOT NULL,
    TO_BE_RETURNED_BY AS (DT_ISSUE + 7),
    DT_RETURN DATE NULL,
    CONSTRAINT PK_BOOK_TXN PRIMARY KEY (TXN_ID),
    CONSTRAINT UK_BOOK_TXN UNIQUE (MEMBER_ID, BOOK_ID, SNO, DT_ISSUE),
    CONSTRAINT FK_BOOK_TXN_MEMBER FOREIGN KEY (MEMBER_ID) REFERENCES MEMBER (MEMBER_ID),
    CONSTRAINT FK_BOOK_TXN_BOOK_SERIAL FOREIGN KEY (BOOK_ID, SNO) REFERENCES BOOK_SERIAL (BOOK_ID, SNO),
    CONSTRAINT CHK_DT_RETURN CHECK (NVL(DT_RETURN, DT_ISSUE) >= DT_ISSUE)
);

